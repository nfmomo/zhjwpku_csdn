####CAP
分布式领域CAP理论：
>Consistency（一致性），数据一致更新，所有数据变动都是同步的
>Avaliability(可用性)，好的响应性能
>Partition tolerance（分区容错性）可靠性

**定理**：任何分布式系统只可能同时满足两点，没法三者兼顾
**忠告**：架构师不要讲精力浪费在如何设计满足三者的完美分布式系统，而是应该进行取舍

####ceph-fuse
>ceph filesystem in user space

####CI
>continous integration, 持续集成
>持续集成作为`敏捷编程`的基石已经被绝大多数开发团队采用

####CIDR
>Classless Inter-Domain Routing
>无类别域间路由

####CRUD
>Create, Retrieve, Update, Delete
>增加，读取，更新，删除

####CRUSH
>**Controlled Replication Under Scalable Hashing**
>Instead of performing a lookup in the metadata table for every client request, the CRUSH algorithm, on demand, computes where the data should be written to or read from. By computing metadata, there is no need to manage a centralized table for metadata.

####DVR(Neutron)
>Distributed Virtual Routing

####FQDN
>Fully qualified domain name
>全称域名，是指主机名加上全路径，全路径中列出了序列中所有域成员
>全域名可以从逻辑上准确地表示出主机在什么地方，也可以说明全域名是主机名的一种完全表示形式

####HBA
>Host Bus Adapter
>主机总线适配器，是一个在服务器和存储装置间提供输入/输出(I/O)处理和物理连接的电路板或集成电路适配器。

####HPC
>High Performance Computing
>高性能计算

####HTC
>High Througput Computing
>高吞吐量计算

####INI
>INI文件格式是某些平台或软件上的配置文件的非正式标准，以**节(section)**和**键(key)**构成，常用于微软Windows操作系统中
>INI是initialization的缩写

####Jenkins
>Jenkins是基于Java开发的一种持续集成（CI）工具，用于监控持续重复的工作，功能包括：
>1. 持续的软件版本发布/测试项目
>2. 监控外部调用执行的工作

####LXC
>Linux Container，是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于C++里的NameSpace。容器有效的将当个操作系统划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。

####MDS(Ceph)
>MetaData Server

####MPP
>Massive Parallel Processor
>大规模并行处理计算机

####PG(Ceph)
>Placement Groups
>Objects的逻辑集合。RADOS系统根据Cluster Map将PGs分配到相应的OSDs。这组OSDs正是PG中的Objects数据的存储位置。RADOS采用CRUSH算法实现了一种稳定、伪随机的hash算法。CRUSH实现了平衡的和与容量相关的数据分配策略。

####RADOS(Ceph)
>Reliable Autonomic Distributed Object Store
>可靠自主分布式对象存储

####RBD
>RADOS Block Device

####RFB
>Remote FrameBuffer 是一个用于远程访问图形用户界面的简单协议。由于RFB协议工作在帧缓冲层，它适用于所有的窗口系统和应用，包括Microsoft Windows, Mac OSX以及X Window System。RFB广泛用于Virtual Network Computing（VNC）以及它的衍生品。

####SAN
>Storage-Area Networks 存储区域网
>是一种类似于普通局域网的告诉存储网络，通常由RAID连接光纤通道组成。SAN和集群节点的数据通信通常由SCSI命令，而不是通过网络协议实现。

####SOA
>Service-oriented architecture 面向服务架构。
>是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。

####TCO
>Total Cost of Ownership
>总所有成本是一种公司经常采用的技术评价标准，它的核心思想是在一定时间范围内所拥有的包括置业成本（acquisition cost）和每年总成本在内的总体成本。

####UEFI
>Unified Extensible Firmware Interface 统一可扩展固件接口
>提供了一组在OS加载之前（启动前）在所有平台上一致的，正确指定的启动服务，被看做是BIOS的继承者。
